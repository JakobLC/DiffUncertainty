hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - seed=123,456,789
    - version=fold0_seed123,fold0_seed456,fold0_seed789
  job:
    name: main
    chdir: null
    override_dirname: seed=123,456,789,version=fold0_seed123,fold0_seed456,fold0_seed789
    id: ???
    num: ???
    config_name: lidc_small_softmax_OF
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/jloch/Desktop/diff/luzern/values
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/jloch/Desktop/diff/luzern/values/uncertainty_modeling/configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      data_augmentations: tta_lidc_2d_small
      model: hrnet_softmax
      datamodule: lidc_2d_small
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
exp_name: lidc-small-softmax-OF
version: null
ckpt_path: null
dataset: lidc_2d_small
data_input_dir: /home/jloch/Desktop/diff/luzern/values_datasets/${dataset}
save_dir: /home/jloch/Desktop/diff/luzern/values/saves
seed: 123
pretrain_epochs: 5
batch_size: 64
evaluate_training_data: true
learning_rate: 0.0001
weight_decay: 0.0
augment_mult: 0.5
track_ema_weights: true
ema_decay: 0.999
optimizer:
  _target_: torch.optim.AdamW
  lr: ${learning_rate}
  weight_decay: ${weight_decay}
logger:
  _target_: pytorch_lightning.loggers.TensorBoardLogger
  save_dir: ${save_dir}
  name: ${exp_name}
  default_hp_metric: false
progress_bar:
  _target_: pytorch_lightning.callbacks.TQDMProgressBar
  refresh_rate: 10
trainer:
  max_epochs: 500
  accelerator: gpu
  devices: 1
  precision: 32
ckpt_save_freq:
  use_linear_saving: false
  use_exponential_saving: true
  only_small_ckpts: true
  linear_freq: 10
  exponent_base: 1.25
  exponential_start: 10
  end: ${trainer.max_epochs}
datamodule:
  _target_: uncertainty_modeling.data.torch_dataloader.BaseDataModule
  num_classes: 2
  ignore_index: -1
  num_workers: 8
  batch_size: 16
  val_batch_size: 16
  data_fold_id: 0
  augmentations: ${AUGMENTATIONS}
  evaluate_training_data: ${evaluate_training_data}
  dataset:
    _target_: uncertainty_modeling.data.lidc2d_dataset.LIDC2DDataset
    splits_path: /home/jloch/Desktop/diff/luzern/values_datasets/lidc_2d_small/splits/texture/firstCycle/splits.pkl
model:
  _target_: uncertainty_modeling.models.hrnet_module.get_seg_model
  cfg:
    MODEL: ${MODEL}
    DATASET:
      NUM_CLASSES: ${datamodule.num_classes}
MODEL:
  NAME: hrnet
  PRETRAINED: true
  pretrained_on: ImageNet
  pretrained_path: /home/jloch/Desktop/diff/luzern/values/uncertainty_modeling/models/checkpoints
  PRETRAINED_WEIGHTS: ${MODEL.pretrained_path}/${MODEL.available_weights.${MODEL.pretrained_on}}
  available_weights:
    ImageNet: hrnetv2_w48_imagenet_pretrained.pth
    Paddle: HRNet_W48_C_ssld_pretrained.pth
  ALIGN_CORNERS: false
  INPUT_CHANNELS: 3
  EXTRA:
    FINAL_CONV_KERNEL: 1
    STAGE1:
      NUM_MODULES: 1
      NUM_BRANCHES: 1
      BLOCK: BOTTLENECK
      NUM_BLOCKS:
      - 4
      NUM_CHANNELS:
      - 64
      FUSE_METHOD: SUM
    STAGE2:
      NUM_MODULES: 1
      NUM_BRANCHES: 2
      BLOCK: BASIC
      NUM_BLOCKS:
      - 4
      - 4
      NUM_CHANNELS:
      - 48
      - 96
      FUSE_METHOD: SUM
    STAGE3:
      NUM_MODULES: 4
      NUM_BRANCHES: 3
      BLOCK: BASIC
      NUM_BLOCKS:
      - 4
      - 4
      - 4
      NUM_CHANNELS:
      - 48
      - 96
      - 192
      DROPOUT:
      - false
      - false
      - false
      FUSE_METHOD: SUM
    STAGE4:
      NUM_MODULES: 3
      NUM_BRANCHES: 4
      BLOCK: BASIC
      NUM_BLOCKS:
      - 4
      - 4
      - 4
      - 4
      DROPOUT:
      - false
      - false
      - false
      - false
      NUM_CHANNELS:
      - 48
      - 96
      - 192
      - 384
      FUSE_METHOD: SUM
AUGMENTATIONS:
  rotation_limit: 22.5
  scale_limit:
  - -0.2
  - 0.2
  mean:
  - 0.485
  - 0.456
  - 0.406
  std:
  - 0.229
  - 0.224
  - 0.225
  border_mode: 0
  mask_value: 0
  height: 64
  width: 64
  gauss_noise_var_limit:
  - 0.2
  - 0.44
  augment_mult: ${augment_mult}
  apply_mult_keys:
  - HorizontalFlip.p
  - Rotate.limit
  - RandomScale.scale_limit
  - GaussNoise.var_limit
  TRAIN:
  - Compose:
      transforms:
      - HorizontalFlip:
          p: 0.5
      - Rotate:
          limit: ${AUGMENTATIONS.rotation_limit}
          border_mode: ${AUGMENTATIONS.border_mode}
          mask_value: ${AUGMENTATIONS.mask_value}
      - RandomScale:
          scale_limit: ${AUGMENTATIONS.scale_limit}
          p: 1.0
      - PadIfNeeded:
          min_height: ${AUGMENTATIONS.height}
          min_width: ${AUGMENTATIONS.width}
          border_mode: ${AUGMENTATIONS.border_mode}
          mask_value: ${AUGMENTATIONS.mask_value}
      - CenterCrop:
          height: ${AUGMENTATIONS.height}
          width: ${AUGMENTATIONS.width}
      - GaussNoise:
          var_limit: ${AUGMENTATIONS.gauss_noise_var_limit}
          p: 0.5
      - Normalize:
          mean: ${AUGMENTATIONS.mean}
          std: ${AUGMENTATIONS.std}
          max_pixel_value: 1.0
      - ToTensorV2: null
  VALIDATION:
  - Compose:
      transforms:
      - Normalize:
          mean: ${AUGMENTATIONS.mean}
          std: ${AUGMENTATIONS.std}
          max_pixel_value: 1.0
      - ToTensorV2: null
  TEST: ${AUGMENTATIONS.VALIDATION}
